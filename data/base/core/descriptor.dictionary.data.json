[
	{
		"_code": {
			"_nid": "",
			"_lid": "data",
			"_gid": "_data",
			"_aid": ["data"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Data section"},
			"_definition": {"iso_639_3_eng": "This property groups all properties whose function is to define the shape and type of data, terms that represent descriptors must contain this property."},
			"_description": {"iso_639_3_eng": "All terms that feature this property are [descriptors](_term_descriptor.md), all *other* term types *should not* have it. This object requires *one* of the following properties:\n\n- [Scalar data container](_scalar.md): This property contains the *data type* definitions and *constraints* for *scalar data values*.\n- [Array data container](_array.md): This property contains the *data type* definitions and *constraints* for *array data values*, which represent a *list* of *data values* of the *same type*.\n- [Set data container](_set.md): This property contains the *data type* definitions and *constraints* for *set data values*, which represent a *list* of *data values* of the *same type* whose values are *unique*.\n- [Key/value dictionary data container](_dict.md): This property contains the *key* and *value* definitions and *constraints* for *key/value dictionary values*.\n\nYou can set this property to an *empty object*, in that case it means that the *descriptor* can have *any container* of *any value*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_data\": {\n\t\t\"_scalar\": {\n\t\t\t\"_class\": \"_class_quantity\",\n\t\t\t\"_type\": \"_type_integer\",\n\t\t\t\"_valid-range\": {\n\t\t\t\t\"_min-range-inclusive\": 5,\n\t\t\t\t\"_max-range-inclusive\": 10\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThe above example describes a [scalar](_scalar.md) discrete [integer](_type_integer.md) [quantitative](_class_quantity.md) value in the range from `5` to `10` inclusive.\n\n\n\n```json\n{\n\t\"_data\": {\n\t\t\"_array\": {\n\t\t\t\"_class\": \"_class_quantity\",\n\t\t\t\"_type\": \"_type_number\",\n\t\t\t\"_valid-range\": {\n\t\t\t\t\"_min-range-inclusive\": 0.0,\n\t\t\t\t\"_max-range-exclusive\": 100.0,\n\t\t\t},\n\t\t\t\"_unit\": \"_data_unit_length_cm\"\n\t\t}\n\t}\n}\n```\n\nThe above example describes a [list](_array.md) of [continuous](_type_number.md) [quantitative](_class_quantity.md) values *greater or equal* to `0.0` and *less than* `100.0` representing a *length* in *centimetres*.\n\n\n\n```json\n{\n\t\"_data\": {\n\t\t\"_set\": {\n\t\t\t\"_class\": \"_class_category\",\n\t\t\t\"_type\": \"_type_string_enum\",\n\t\t\t\"_kind\": [\"iso_639_3\"]\n\t\t}\n\t}\n}\n```\n\nThe above example describes *list* of [unique elements](_set.md) belonging to the `iso_639_3` controlled vocabulary.\n\n\n\n```json\n{\n\t\"_data\": {\n\t\t\"_dict\": {\n\t\t\t\"_dict_key\": {\n\t\t\t\t\"_class\": \"_class_category\",\n\t\t\t\t\"_type\": \"_type_string_enum\",\n\t\t\t\t\"_kind\": [\"iso_3166_1\", \"iso_3166_3\"]\n\t\t\t},\n\t\t\t\"_dict_value\": {\n\t\t\t\t\"_dict\": {\n\t\t\t\t\t\"_dict_key\": {\n\t\t\t\t\t\t\"_class\": \"_class_category\",\n\t\t\t\t\t\t\"_type\": \"_type_string_enum\",\n\t\t\t\t\t\t\"_kind\": [\"iso_639_3\"]\n\t\t\t\t\t},\n\t\t\t\t\t\"_dict_value\": {\n\t\t\t\t\t\t\"_array\": {\n\t\t\t\t\t\t\t\"_class\": \"_class_other\",\n\t\t\t\t\t\t\t\"_type\": \"_type_object\",\n\t\t\t\t\t\t\t\"_kind\": [\"some_object_definition\"],\n\t\t\t\t\t\t\t\"_elements\": {\n\t\t\t\t\t\t\t\t\"_min-items\": 5,\n\t\t\t\t\t\t\t\t\"_max-items\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThe above example describes a [dictionary](_dict.md) whose *keys* are the [global identifiers](_gid.md) of the ISO 3166 part 1 or part 3 country *controlled vocabulary elements*, and the values are *another dictionary* whose keys are ISO 639 languages and whose *values* are *arrays* that correspond to the `some_object_definition` *data structure type*; these *array* values must have a *minimum* of `5` elements and a *maximum* of `10` elements. This is an example of a recursive dictionary definition.\n\n\n\n```json\n{\n\t\"_data\": {\n\t\t\"_scalar\": {}\n\t}\n}\n```\nThis example shows the *data definition* for a *descriptor* that can take *only* [scalar](_scalar.md) values of any [type](_type.md).\n\n\n\n```json\n{\n\t\"_data\": {}\n}\n```\nThis example shows the *data definition* for a *descriptor* that can take *any data shape* or *value*."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_data"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_one-none": [
					"_scalar",
					"_array",
					"_set",
					"_dict"
				]
			},
			"_immutable": [
				"_scalar",
				"_array",
				"_set",
				"_dict"
			]
		}
	},

	{
		"_code": {
			"_nid": "",
			"_lid": "scalar",
			"_gid": "_scalar",
			"_aid": ["scalar"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Scalar data container"},
			"_definition": {"iso_639_3_eng": "This property describes a container for a single value of any type."},
			"_description": {"iso_639_3_eng": "This property defines the *shape* and *type* of *scalar data values*. A *number* or a *text* are examples of a scalar values; an *array* of *elements* or a key/value *dictionary* would *not* be considered a scalar value."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_scalar\": {\n\t\t\"_class\": \"_class_quantity\",\n\t\t\"_type\": \"_type_integer\",\n\t\t\"_valid-range\": {\n\t\t\t\"_min-range-inclusive\": 5,\n\t\t\t\"_max-range-inclusive\": 10\n\t\t}\n\t}\n}\n```\nThis example describes a [quantitative](__class_quantity.md) *scalar* discrete [integer](_type_integer.md) value in the *range* from `5` to `10` inclusive.\n\n\n\n\n```json\n{\n\t\"_scalar\": {\n\t\t\"_class\": \"_class_quantity\",\n\t\t\"_type\": \"_type_number\",\n\t\t\"_valid-range\": {\n\t\t\t\"_min-range-inclusive\": 0.0,\n\t\t\t\"_max-range-exclusive\": 100.0\n\t\t},\n\t\t\"_unit\": \"_unit_length_cm\"\n\t}\n}\n```\nThis example describes a [continuous](_type_number.md) [quantitative](_class_quantity.md) value *greater or equal* to `0.0` and *less than* `100.0` representing a length in [centimetres](_unit_length_cm.md).\n\n\n\n\n```json\n{\n\t\"_scalar\": {\n\t\t\"_class\": \"_class_category\",\n\t\t\"_type\": \"_type_string_enum\",\n\t\t\"_kind\": [\"iso_639_3\"]\n\t}\n}\n```\nThis example describes a [categorical](_class_category.md) [enumeration](_type_string_enum.md) that must be chosen from the [controlled vocabulary](iso_639_3.md) of ISO 639 *language codes*.\n\n\n\n\n```json\n{\n\t\"_scalar\": {\n\t\t\"_type\": \"_type_string\",\n\t\t\"_format\": \"_format_markdown\"\n\t}\n}\n```\nThis example describes a [text](_type_string.md) value *encoded* in [Markdown](_format_markdown.md) format.\n\n\n\n\n```json\n{\n\t\"_scalar\": {}\n}\n```\nThis example shows the *data definition* for a *descriptor* that can hold *scalar* values of *any type*, this means that the container *does not accept* [arrays](_array.md), [sets](_set.md) or [dictionaries](_dict.md)."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_scalar"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_all": [
					"_type"
				]
			},
			"_banned": [
				"_scalar",
				"_array",
				"_set",
				"_dict"
			],
			"_recommended": {
				"_selection-descriptors_all": [
					"_class"
				]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "array",
			"_gid": "_array",
			"_aid": ["array"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Array data container"},
			"_definition": {"iso_639_3_eng": "This property describes a container for an array of elements of the same data type."},
			"_description": {"iso_639_3_eng": "This property defines the *shape* and *type* of an *array* of *items*. An array is a *list* of *values* of the *same type*, values can be *repeated* and the *type definitions* refer to the *list elements*.\n\nThe property can contain *one* of the following elements:\n\n- [Scalar elements](_scalar.md): The array elements must be *scalar values*.\n- [Array elements](_array.md): The array contains a list of *arrays*.\n- [Set elements](_set.md): The array contains a list of *sets*.\n- [Key/value dictionary elements](_dict.md): The array contains a list of *key/value dictionaries*.\n\nThe property may also be *empty*, in which case the array *elements* can be of any *shape* or *type*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_array\": {\n\t\t\"_scalar\": {\n\t\t\t\"_class\": \"_class_quantity\",\n\t\t\t\"_type\": \"_type_integer\",\n\t\t\t\"_valid-range\": {\n\t\t\t\t\"_min-range-inclusive\": 5,\n\t\t\t\t\"_max-range-inclusive\": 10\n\t\t\t}\n\t\t}\n\t}\n}\n```\nThis example describes an *array* of [scalar](_scalar.md) [integer](_type_integer.md) values in the *range* from `5` to `10` inclusive, the *list element* values are [quantitatve](_class_quantity.md).\n\n\n\n```json\n{\n\t\"_array\": {\n\t\t\"_array\": {\n\t\t\t\"_scalar\": {\n\t\t\t\t\"_class\": \"_class_quantity\",\n\t\t\t\t\"_type\": \"_type_number\",\n\t\t\t\t\"_valid-range\": {\n\t\t\t\t\t\"_min-range-inclusive\": 0.0,\n\t\t\t\t\t\"_max-range-exclusive\": 100.0\n\t\t\t\t},\n\t\t\t\t\"_unit\": \"_unit_length_cm\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\nThis example describes a *list* of *arrays* of [numbers](_type_number.md) whose value is *greater than or equal* to `0.0` and *less than* `100.0` representing *lengths* in [centimetres](_unit_length_cm.md), the *elements* of the *inner list* are [quantitatve](_class_quantity.md).\n\n\n\n```json\n{\n\t\"_array\": {\n\t\t\"_set\": {\n\t\t\t\"_scalar\": {\n\t\t\t\t\"_class\": \"_class_category\",\n\t\t\t\t\"_type\": \"_type_string_enum\",\n\t\t\t\t\"_kind\": [\"iso_639_3\"]\n\t\t\t}\n\t\t}\n\t}\n}\n```\nThis example describes an *array* of [sets](_set.md) whose *elements* belong to the [enumeration](_type_string_enum.md) of ISO 639 [language codes](iso_639_3.md), the *elements* of the *inner set* are [categorical](_class_category.md).\n\n\n\n```json\n{\n\t\"_array\": {\n\t\t\"_dict\": {\n\t\t\t\"_dict_key\": {\n\t\t\t\t\"_class\": \"_class_category\",\n\t\t\t\t\"_type_key\": \"_type_string_enum\",\n\t\t\t\t\"_kind\": [\"iso_3166_1\"]\n\t\t\t},\n\t\t\t\"_dict_value\": {\n\t\t\t\t\"_scalar\": {\n\t\t\t\t\t\"_type\": \"_type_object\",\n\t\t\t\t\t\"_kind\": [\"my_struct_definition\"]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\nThis example describes an *array* of [key/value dictionary](_dict.md) *items*. The [dictionary keys](_dict_key.md) are [categorical](_class_category.md) and must be selected among the elements of the [ISO country codes](iso_3166_1.md) [controlled vocabulary](_type_string_enum.md). The dictionary values are [objects](_type_object.md) of the `my_struct_definition` class.\n\n\n\n```json\n{\n\t\"_array\": {}\n}\n```\nThis example describes an *array* that can have *elements* of *any shape* or *type*."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_array"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_one-none": [
					"_scalar",
					"_array",
					"_set",
					"_dict"
				]
			},
			"_immutable": [
				"_scalar",
				"_array",
				"_set",
				"_dict"
			]
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "set",
			"_gid": "_set",
			"_aid": ["set"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Set data container"},
			"_definition": {"iso_639_3_eng": "This property describes a container for an array of unique elements of the same data type."},
			"_description": {"iso_639_3_eng": "This property defines the *shape* and *type* of a *set* of *items*. A *set* is a *list* of *values* of the *same type*, values must be *unique* and the *type definitions* refer to the *list elements*.\n\nThe property *must* contain the [scalar](_set_scalar.md) container which defines the [data type](_set_type.md) of the set *elements*, which includes [booleans](_type_boolean.md), [integers](_type_integer.md), [floats](_type_number.md) and [strings](_type_string.md)."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_set\": {\n\t\t\"_set_scalar\": {\n\t\t\t\"_set_type\": \"_type_boolean\"\n\t\t}\n\t}\n}\n```\nThis example describes a *set* of [booleans](_type_boolean.md); such a *set* can *only* contain *one* element, `true` or `false`.\n\n\n\n\n```json\n{\n\t\"_set\": {\n\t\t\"_set_scalar\": {\n\t\t\t\"_class\": \"_class_quantity\",\n\t\t\t\"_set_type\": \"_type_integer\"\n\t\t}\n\t}\n}\n```\nThis example describes a *set* of [discrete](_type_integer.md) [quantitative](_class_quantity.md) values.\n\n\n\n\n```json\n{\n\t\"_set\": {\n\t\t\"_set_scalar\": {\n\t\t\t\"_class\": \"_class_quantity\",\n\t\t\t\"_set_type\": \"_type_number\",\n\t\t\t\"_valid-range\": {\n\t\t\t\t\"_min-range-inclusive\": 0.0,\n\t\t\t\t\"_max-range-exclusive\": 100.0\n\t\t\t},\n\t\t\t\"_unit\": \"_unit_length_cm\"\n\t\t}\n\t}\n}\n```\nThis example describes a *set* of [continuous](_type_number.md) [quantitative](_class_quantity.md) values *greater or equal* to `0.0` and *less than* `100.0` representing [centimetres](_unit_length_cm.md).\n\n\n\n\n```json\n{\n\t\"_set\": {\n\t\t\"_set_scalar\": {\n\t\t\t\"_class\": \"_class_category\",\n\t\t\t\"_set_type\": \"_type_string_enum\",\n\t\t\t\"_kind\": [\"iso_639_3\"]\n\t\t}\n\t}\n}\n```\nThis example describes a set of [categorical](_class_category.md) [enumerations](_type_string_enum.md) that must be chosen from the [controlled vocabulary](iso_639_3.md) of ISO 639 *language codes*."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_set"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_one-none": [
					"_scalar"
				]
			},
			"_banned": [
				"_array",
				"_set",
				"_dict"
			],
			"_immutable": [
				"_scalar"
			]
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "dict",
			"_gid": "_dict",
			"_aid": ["dict"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Dictionary data container"},
			"_definition": {"iso_639_3_eng": "This property describes a key/value data dictionary, in which a string key is used to access a value."},
			"_description": {"iso_639_3_eng": "This property defines the *shape* and *type* of a *key/value dictionary*. *Keys* are *strings* that *may* be *bound* to a *controlled vocabulary*, while *values* may be of *any type*. Once defined the *value type*, this must apply to *all values* in the *dictionary*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_dict_key\": {\n\t\t\"_class\": \"_class_category\",\n\t\t\"_type\": \"_type_string_enum\",\n\t\t\"_kind\": \"iso_639_3\"\n\t},\n\t\"_dict_value\": {\n\t\t\"_array\": {\n\t\t\t\"_class\": \"_class_other\",\n\t\t\t\"_type\": \"_type_object\",\n\t\t\t\"_kind\": \"some_object_definition\",\n\t\t\t\"_min-items\": 5,\n\t\t\t\"_max-items\": 10\n\t\t}\n\t}\n}\n```\n\nThis example describes a *dictionary* whose *keys* are the *global identifiers* of the ISO 639 languages *controlled vocabulary elements*, and the values are *arrays* of *objects* that correspond to the `some_object_definition` *data structure type*; these *array* values must have a *minimum* of `5` elements and a *maximum* of `10` elements.\n\n```json\n{\n\t\"_dict_key\": {\n\t\t\"_class\": \"_class_other\",\n\t\t\"_type\": \"_type_string\"\n\t},\n\t\"_dict_value\": {\n\t\t\"_scalar\": {\n\t\t\t\"_class\": \"_class_other\",\n\t\t\t\"_type\": \"_type_string\",\n\t\t\t\"_format\": \"_format_markdown\"\n\t\t}\n\t}\n}\n```\n\nThis example describes a *dictionary* whose *keys* are *plain strings* and *values* are *text* in *Markdown* format. It implements a multilingual styled text\n\n```json\n{\n\t\"_dict_key\": {\n\t\t\"_class\": \"_class_category\",\n\t\t\"_type\": \"_type_string_enum\",\n\t\t\"_kind\": \"iso_3166_1\"\n\t},\n\t\"_dict_value\": {\n\t\t\"_dict\": {\n\t\t\t\"_dict_key\": {\n\t\t\t\t\"_class\": \"_class_category\",\n\t\t\t\t\"_type\": \"_type_string_enum\",\n\t\t\t\t\"_kind\": \"iso_639_3\"\n\t\t\t},\n\t\t\t\"_dict_value\": {\n\t\t\t\t\"_array\": {\n\t\t\t\t\t\"_class\": \"_class_other\",\n\t\t\t\t\t\"_type\": \"_type_object\",\n\t\t\t\t\t\"_kind\": \"some_object_definition\",\n\t\t\t\t\t\"_min-items\": 5,\n\t\t\t\t\t\"_max-items\": 10\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThis example describes a *dictionary* whose *keys* are the *global identifiers* of the ISO 3166 country *controlled vocabulary elements*, and the values are *another dictionary* whose keys are ISO 639 languages and whose *values* are *arrays* that correspond to the `some_object_definition` *data structure type*; these *array* values must have a *minimum* of `5` elements and a *maximum* of `10` elements. This is an example of a recursive dictionary definition.\n\n```json\n{\n\t\"_dict_key\": {},\n\t\"_dict_value\": {}\n}\n```\n\nThis example describes a dictionary whose *keys* can be *any string* and whose *values* can be *any container* with *any value*."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_dict"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_all": [
					"_dict_key",
					"_dict_value"
				]
			},
			"_banned": [
				"_scalar",
				"_array",
				"_set",
				"_dict"
			]
		}
	},

	{
		"_code": {
			"_nid": "_set",
			"_lid": "scalar",
			"_gid": "_set_scalar",
			"_aid": ["scalar"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Set scalar data container"},
			"_definition": {"iso_639_3_eng": "This property describes the container for the elements of a set."},
			"_description": {"iso_639_3_eng": "This property defines the [data type](_set_type.md) of the *elements* of a [set](_set.md). Since a set is a *list* of *unique elements*, these elements must be *comparable* in order to prevent duplicate items. Set elements can be [booleans](_type_boolean.md), [integers](_type_integer.md), [floats](_type_number.md) and [strings](_type_string.md)."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_set_scalar\": {\n\t\t\"_set_type\": \"_type_boolean\"\n\t}\n}\n```\nThe *elements* of the [set](_set.md) can either be, `true` or `false`.\n\n\n\n\n```json\n{\n\t\"_set_scalar\": {\n\t\t\"_class\": \"_class_quantity\",\n\t\t\"_set_type\": \"_type_integer\"\n\t}\n}\n```\nThe *elements* of the [set](_set.md) are [quantitative](_class_quantity.md) values of [type](_set_type.md) [integer](_type_integer.md).\n\n\n\n\n```json\n{\n\t\"_set_scalar\": {\n\t\t\"_class\": \"_class_quantity\",\n\t\t\"_set_type\": \"_type_number\",\n\t\t\"_valid-range\": {\n\t\t\t\"_min-range-inclusive\": 0.0,\n\t\t\t\"_max-range-exclusive\": 100.0\n\t\t},\n\t\t\"_unit\": \"_unit_length_cm\"\n\t}\n}\n```\nThe *elements* of the [set](_set.md) are [continuous](_type_number.md) [quantitative](_class_quantity.md) values *greater or equal* to `0.0` and *less than* `100.0` representing [centimetres](_unit_length_cm.md).\n\n\n\n\n```json\n{\n\t\"_set_scalar\": {\n\t\t\"_class\": \"_class_category\",\n\t\t\"_set_type\": \"_type_string_enum\",\n\t\t\"_kind\": [\"iso_639_3\"]\n\t}\n}\n```\nThe *elements* of the [set](_set.md) are [categorical](_class_category.md) [enumerations](_type_string_enum.md) that must be chosen from the ISO 639 [language codes](iso_639_3.md)."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_set_scalar"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_all": [
					"_set_type"
				]
			},
			"_banned": [
				"_scalar",
				"_array",
				"_set",
				"_dict"
			],
			"_recommended": {
				"_selection-descriptors_all": [
					"_class"
				]
			}
		}
	},

	{
		"_code": {
			"_nid": "_dict",
			"_lid": "key",
			"_gid": "_dict_key",
			"_aid": ["key"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Dictionary key data container"},
			"_definition": {"iso_639_3_eng": "This property describes the data type of dictionary keys, keys are strings that may belong to controlled vocabularies."},
			"_description": {"iso_639_3_eng": "This property is an *object structure* that contains the *data definition* for a *dictionary key*. Dictionary keys can be *strings* or *enumerations*.\n\nYou *cannot omit* this *property*, but you can *set* it to an *empty object*, in that case it is assumed the dictionary *key* can be *any string*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_dict_key\": {\n\t\t\"_class\": \"_class_category\",\n\t\t\"_type\": \"_type_string_enum\",\n\t\t\"_kind\": \"iso_639_3\"\n\t},\n}\n```\n\nThis example describes a *dictionary* whose *keys* are the *global identifiers* of the ISO 639 languages *controlled vocabulary elements*.\n\n```json\n{\n\t\"_dict_key\": {\n\t\t\"_class\": \"_class_other\",\n\t\t\"_type\": \"_type_string\"\n\t},\n}\n```\n\nThis example describes a *dictionary* whose *keys* are *plain strings*.\n\n```json\n{\n\t\"_dict_key\": {\n\t\t\"_class\": \"_class_category\",\n\t\t\"_type\": \"_type_string_enum\",\n\t\t\"_kind\": \"iso_3166_1\"\n\t},\n}\n```\n\nThis example describes a *dictionary* whose *keys* are the *global identifiers* of the ISO 3166 country *controlled vocabulary elements*.\n\n```json\n{\n\t\"_dict_key\": {},\n}\n```\n\nThis example describes a dictionary whose *keys* can be *any string*."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_dict_key"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_all": [
					"_type_key"
				]
			},
			"_banned": [
				"_type"
			],
			"_recommended": {
				"_selection-descriptors_all": [
					"_class"
				]
			}
		}
	},
	{
		"_code": {
			"_nid": "_dict",
			"_lid": "value",
			"_gid": "_dict_value",
			"_aid": ["value"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Dictionary value data definition"},
			"_definition": {"iso_639_3_eng": "Data container and type definitions for dictionary values."},
			"_description": {"iso_639_3_eng": "This [object](_container) defines the *type* of the *value* in a [dictionary](_container_dict), dictionary values can be of *any type*.\n\nThe *property* is *required*, but you can set it to an *empty object*: in that case it means that the dictionary can have *values* of *any type*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_dict_value\": {\n\t\t\"_array\": {\n\t\t\t\"_class\": \"_class_other\",\n\t\t\t\"_type\": \"_type_object\",\n\t\t\t\"_kind\": \"some_object_definition\",\n\t\t\t\"_min-items\": 5,\n\t\t\t\"_max-items\": 10\n\t\t}\n\t}\n}\n```\n\nThis example describes a *dictionary* whose *values* are *arrays* of *objects* that correspond to the `some_object_definition` *data structure type*; these *array* values must have a *minimum* of `5` elements and a *maximum* of `10` elements.\n\n```json\n{\n\t\"_dict_value\": {\n\t\t\"_scalar\": {\n\t\t\t\"_class\": \"_class_other\",\n\t\t\t\"_type\": \"_type_string\",\n\t\t\t\"_format\": \"_format_markdown\"\n\t\t}\n\t}\n}\n```\n\nThis example describes a *dictionary* whose *values* are *text* in *Markdown* format.\n\n```json\n{\n\t\"_dict_value\": {\n\t\t\"_dict\": {\n\t\t\t\"_dict_key\": {\n\t\t\t\t\"_class\": \"_class_category\",\n\t\t\t\t\"_type\": \"_type_string_enum\",\n\t\t\t\t\"_kind\": \"iso_639_3\"\n\t\t\t},\n\t\t\t\"_dict_value\": {\n\t\t\t\t\"_array\": {\n\t\t\t\t\t\"_class\": \"_class_other\",\n\t\t\t\t\t\"_type\": \"_type_object\",\n\t\t\t\t\t\"_kind\": \"some_object_definition\",\n\t\t\t\t\t\"_min-items\": 5,\n\t\t\t\t\t\"_max-items\": 10\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThis example describes a *dictionary* whose *values* are *another dictionary* whose keys are ISO 639 languages and whose *values* are *arrays* that correspond to the `some_object_definition` *data structure type*; these *array* values must have a *minimum* of `5` elements and a *maximum* of `10` elements. This is an example of a recursive dictionary definition.\n\n```json\n{\n\t\"_dict_value\": {}\n}\n```\n\nThis example describes a dictionary whose *values* can be *any container* with *any value*."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_object",
				"_kind": ["_data"]
			}
		}
	},

	{
		"_code": {
			"_nid": "",
			"_lid": "class",
			"_gid": "_class",
			"_aid": ["class"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Data classification"},
			"_definition": {"iso_639_3_eng": "This enumerated value indicates to which class or category the descriptor's value belongs."},
			"_description": {"iso_639_3_eng": "The class can be selected from the following choices:\n\n- [Category](_class_category): The value is *categorical*.\n- [Reference](_class_reference): The value is a *reference* to another item.\n- [Identifier](_class_identifier): The value is an *identifier*.\n- [Quantity](_class_quantity): The value represents an *observed quantity*.\n- [Calculated quantity](_class_quantity_calculated): The value represents a quantity *calculated* from a *set of observations*.\n- [Averaged quantity](_class_quantity_averaged): The value represents a quantity *averaging* a *range* of *observations*.\n- [Time](_class_time): The value represents a point in a time series.\n\nThe property can be used to *group descriptors* according to the *function* of the *value*.\n\n*This classification applies to scalar values*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_category",
				"_type": "_type_string_enum",
				"_kind": ["_class"]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "type",
			"_gid": "_type",
			"_aid": ["type"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Data type"},
			"_definition": {"iso_639_3_eng": "The data type of the descriptor's value."},
			"_description": {"iso_639_3_eng": "The *data type* defines the *type* that the *value* or *values* held by the *descriptor* should have. This type applies to the *scalar dimension* of the *value*, this means that, in the case of an *array*, the type *applies* to the *array elements*.\n\nThese are the possible values:\n\n- [Boolean](_type_boolean): *True* or *false* value. No other [data section](_data) properties are expected.\n- [Integer](_type_integer): *Numeric discrete* value. The [data section](_data) can include the following properties: [unit](_unit), [unit name](_unit-name), [range](_range), [valid range](_valid-range) and [normal range](_normal-range).\n- [Numeric](_type_number): *Numeric discrete* or *continuous* value; will be considered a *floating point number*. The [data section](_data) can include the following properties: [unit](_unit), [unit name](_unit-name), [range](_range), [valid range](_valid-range) and [normal range](_normal-range).\n- [Time-stamp](_type_number_timestamp): A [numeric](_type_number) Unix Timestamp, it is used to indicate a *precise moment in time*. The [data section](_data) can include the following properties: [range](_range), [valid range](_valid-range) and [normal range](_normal-range).\n- [String](_type_string): A *character* or *text* encoded in UTF-8. The [data section](_data) can include the following properties: [format](_format), [unit](_unit), [unit name](_unit-name) and [regular expression](_regexp).\n- [Key reference](_type_string_key): A [string](_type_string) representing the [global identifier](_gid) of a *document* from the *terms collection*. The [data section](_data) is *required* to include the [data kind](_kind) field which specifies the *kind of term*, these are the allowed choices:\n    - [Any term](_any-term): The value can reference *any term* in the *terms collection*.\n    - [Any enumeration](_any-enum): The value can reference *any term* *belonging* to a *controlled vocabulary*, this means that the *term* must be *referenced* in at least one *edge* with the [enumeration](_predicate_enum-of) [predicate](_predicate).\n    - [Any structure](_any-object): The value can reference *any term* that *defines* an *object data structure*: such terms must have the [rules section](_rule) property.\n    - [Any descriptor](_any-descriptor): The value can reference *any term* that *defines* a *descriptor*: such terms must have the [data section](_data) property.\n- [Document handle](_type_string_handle): A [string](_type_string) representing the [document handle](_id) of a *record* belonging to *any collection*. No other [data section](_data) properties are expected.\n- [Enumeration](_type_string_enum): A [string](_type_string) representing the [global identifier](_gid) of a *document* belonging to the *terms collection* that is part of a *controlled vocabulary*. The [data section](_data) can include the following properties: [format](_format), [unit](_unit), [unit name](_unit-name) and [regular expression](_regexp). In addition, the [data section](_data) *requires* the [data kind](_kind) field, that is *must* *specify* from which *controlled vocabulary* the value must be *chosen*.\n- [Object](_type_object): An *object data structure*. The [data section](_data) is required to contain the [data kind](_kind) field, and these are the allowed choices:\n    - *A [global identifier](_gid)*: It must be one or more [key references](_type_string_key) to *terms* that define a *data structure type*, the term *must include* the [rules section](_rule). This means that the value *must* be an *object* of *that type*.\n    - [Any structure](_any-object): The value can be an *object* of *any type*, but its *properties* will be *parsed* and *validated*. This means that only the *constraints* at the *object level* will be *ignored*.\n- [GeoJSON geometry](_type_geo-json): An *object data structure* representing a *geographic structure* encoded in the [GeoJSON](https://geojson.org) data format. No other [data section](_data) properties are expected.\n\nIf the [data type](_type) is *omitted*, it means that the *value* can be of *any scalar type*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_category",
				"_type": "_type_string_enum",
				"_kind": ["_type"]
			}
		}
	},
	{
		"_code": {
			"_nid": "_set",
			"_lid": "type",
			"_gid": "_set_type",
			"_aid": ["type"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Set elements data type"},
			"_definition": {"iso_639_3_eng": "The data type of the elements of a set."},
			"_description": {"iso_639_3_eng": "This property is used to define the *data type* of [set](_set.md) *elements*, these are the allowed values:\n\n- [Boolean](_type_boolean.md): *True* or *false* value.\n- [Integer](_type_integer.md): *Numeric discrete* value. The [data section](_set_scalar.md) can include the following properties: [unit](_unit.md), [unit name](_unit-name.md), [range](_range.md), [valid range](_valid-range.md) and [normal range](_normal-range.md).\n- [Numeric](_type_number.md): *Numeric discrete* or *continuous* value; will be considered a *floating point number*. The [data section](_set_scalar.md) can include the following properties: [unit](_unit.md), [unit name](_unit-name.md), [range](_range.md), [valid range](_valid-range.md) and [normal range](_normal-range.md).\n- [Time-stamp](_type_number_timestamp.md): A [numeric](_type_number.md) Unix Timestamp, it is used to indicate a *precise moment in time*. The [data section](_set_scalar.md) can include the following properties: [range](_range.md), [valid range](_valid-range.md) and [normal range](_normal-range.md).\n- [String](_type_string.md): A *character* or *text* encoded in UTF-8. The [data section](_set_scalar.md) can include the following properties: [format](_format.md), [unit](_unit.md), [unit name](_unit-name.md) and [regular expression](_regexp.md).\n- [Key reference](_type_string_key.md): A [string](_type_string.md) representing the [global identifier](_gid.md) of a *document* from the *terms collection*. The [data section](_set_scalar.md) is *required* to include the [data kind](_kind.md) field which specifies the *kind of term*, these are the allowed choices:\n    - [Any term](_any-term.md): The value can reference *any term* in the *terms collection*.\n    - [Any enumeration](_any-enum.md): The value can reference *any term* *belonging* to a *controlled vocabulary*, this means that the *term* must be *referenced* in at least one *edge* with the [enumeration](_predicate_enum-of.md) [predicate](_predicate.md).\n    - [Any structure](_any-object.md): The value can reference *any term* that *defines* an *object data structure*: such terms must have the [rules section](_rule.md) property.\n    - [Any descriptor](_any-descriptor.md): The value can reference *any term* that *defines* a *descriptor*: such terms must have the [data section](_data) property.\n- [Document handle](_type_string_handle.md): A [string](_type_string.md) representing the [document handle](_id.md) of a *record* belonging to *any collection*. No other [data section](_set_scalar.md) properties are expected.\n- [Enumeration](_type_string_enum.md): A [string](_type_string.md) representing the [global identifier](_gid.md) of a *document* belonging to the *terms collection* that is part of a *controlled vocabulary*. The [data section](_set_scalar.md) can include the following properties: [format](_format.md), [unit](_unit.md), [unit name](_unit-name.md) and [regular expression](_regexp.md). In addition, the [data section](_set_scalar.md) *requires* the [data kind](_kind.md) field, that is *must* *specify* from which *controlled vocabulary* the value must be *chosen*.\n\nIf the [data type](_set_type.md) is *required*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_category",
				"_type": "_type_string_enum",
				"_kind": ["_type"]
			}
		}
	},
	{
		"_code": {
			"_nid": "_type",
			"_lid": "key",
			"_gid": "_type_key",
			"_aid": ["key"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Key data type"},
			"_definition": {"iso_639_3_eng": "The data type of the dictionary key."},
			"_description": {"iso_639_3_eng": "This field defines the data type of the dictionary key, it is an enumerated choice that can take the following values:\n\n- [String](_type_string): A *character* or *text* encoded in UTF-8. The [data section](_data) can include the [regular expression](_regexp) property.\n- [Key reference](_type_string_key): A [string](_type_string) representing the [global identifier](_gid) of a *document* from the *terms collection*. The [data section](_data) is *required* to include the [data kind](_kind) field which specifies the *kind of term*, these are the allowed choices:\n    - [Any term](_any-term): The value can reference *any term* in the *terms collection*.\n    - [Any enumeration](_any-enum): The value can reference *any term* *belonging* to a *controlled vocabulary*, this means that the *term* must be *referenced* in at least one *edge* with the [enumeration](_predicate_enum-of) [predicate](_predicate).\n    - [Any structure](_any-object): The value can reference *any term* that *defines* an *object data structure*: such terms must have the [rules section](_rule) property.\n    - [Any descriptor](_any-descriptor): The value can reference *any term* that *defines* a *descriptor*: such terms must have the [data section](_data) property.\n- [Enumeration](_type_string_enum): A [string](_type_string) representing the [global identifier](_gid) of a *document* belonging to the *terms collection* that is part of a *controlled vocabulary*. The [data section](_data) can include the following properties: [format](_format), [unit](_unit), [unit name](_unit-name) and [regular expression](_regexp). In addition, the [data section](_data) *requires* the [data kind](_kind) field, that is *must* *specify* from which *controlled vocabulary* the value must be *chosen*.\n\nWhen validating dictionary types, the *key* and *value* parts are *parsed* and *validated independently*, dictionary keys are not considered descriptors.\n\nThe [key type](_type_key) field is *required*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_category",
				"_type": "_type_string_enum",
				"_kind": ["_type_key"]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "kind",
			"_gid": "_kind",
			"_aid": ["kind"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Data type references"},
			"_definition": {"iso_639_3_eng": "Set of data type references to which the property value must belong. The reference must be in the form of a term global identifier."},
			"_description": {"iso_639_3_eng": "This field is a [set](_set) of [global identifiers](_gid) which reference terms that represent *root elements* of *controlled vocabularies*, *object data structures* and other kind of *graphs*. The field is relevant to the [data type](_type) of the current descriptor and is *required* and *restricted* to the [data type](_type) values:\n\n- [Key reference](_type_string_key): the *data kind* is required and can take the following values:\n    - [Any term](_any-term): The value can reference *any term* in the *terms collection*.\n    - [Any enumeration](_any-enum): The value can reference *any term* *belonging* to a *controlled vocabulary*, this means that the *term* must be *referenced* in at least one *edge* with the [enumeration](_predicate_enum-of) [predicate](_predicate).\n    - [Any structure](_any-object): The value can reference *any term* that *defines* an *object data structure*: such terms must have the [rules section](_rule) property.\n    - [Any descriptor](_any-descriptor): The value can reference *any term* that *defines* a *descriptor*: such terms must have the [data section](_data) property.\n\n- [Enumeration](_type_string_enum): the *data kind* is *required* to indicate the *list* of *controlled vocabularies* to which the *value* must *belong*. The set *elements* are the [global identifiers](_gid) of *terms* at the *root* of an *enumeration graph*.\n- [Object](_type_object): the *data kind* is *required*, it must contain [key references](_type_string_key) to *term*s that define *data structure types*, the referenced terms *must include* the [rules section](_rule). This means that the value *must* *conform* to *at least one* of the referenced *structure definitions*. This field can contain the following values:\n    - [Global identifier](_gid): It must be one or more [key references](_type_string_key) to *terms* that define a *data structure type*, the term *must include* the [rules section](_rule). This means that the value *must* be an *object* of *that type*.\n    - [Any structure](_any-object): The value can be an *object* of *any type*, but its *properties* will be *parsed* and *validated*. This means that only the *constraints* at the *object level* will be *ignored*."}
		},
		"_data": {
			"_set": {
				"_scalar": {
					"_class": "_class_category",
					"_type": "_type_string_key",
					"_kind": ["_any-term"]
				}
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "format",
			"_gid": "_format",
			"_aid": ["format"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Data format"},
			"_definition": {"iso_639_3_eng": "Format or encoding of the data."},
			"_description": {"iso_639_3_eng": "This field can be used to indicate that the *value* is *formatted* or *encoded*. The idea is to implement backend functions for validating or processing data provided in the format and handle appropriately the format when returning the data to the user, such as displaying styled text when handling *markdown* or *html*.\n\nIn general, the *data type* will be *string*."},
			"_examples": {"iso_639_3_eng": "The field is a controlled vocabulary, these are the allowed values:\n\n- [`markdown`](/enum/data/formats/markdown): [Markdown](https://en.wikipedia.org/wiki/Markdown) formatted string.\n- [`html`](/enum/data/formats/html): [HyperText](https://en.wikipedia.org/wiki/HTML) markdown formatted string.\n- [`uri`](/enum/data/formats/uri): [Uniform Resource Identifier](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).\n- [`hex`](/enum/data/formats/hex): This option indicates that the string should be treated as a [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) value.\n- `svg`: [Scalable Vector Graphics (SVG)]([Scalable Vector Graphics - Wikipedia](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics)) image as string.\n- `email`: An [electronic mail]([Email - Wikipedia](https://en.wikipedia.org/wiki/Email)) address.\n- `ymd`: A string representing a date in `YYYYMMDD` format, where day, or day and month may be omitted.\n- `date`: A date expressed in [RFC 3339, section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).\n- `time`: A time expressed in [RFC 3339, section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).\n- `date-time`: A date and time expressed in [RFC 3339, section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).\n- `hostname`: An Internet host name, see [RFC5890, section 2.3.2.3](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1).\n- `ipv4`: An IPv4 Internet address as defined in [RFC 2673, section 3.2](https://tools.ietf.org/html/rfc2673#section-3.2).\n- `ipv6`: An IPv6 Internet address as defined in [RFC 2373, section 2.2](http://tools.ietf.org/html/rfc2373#section-2.2)."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_category",
				"_type": "_type_string_enum",
				"_kind": ["_format"]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "unit",
			"_gid": "_unit",
			"_aid": ["unit"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Data unit"},
			"_definition": {"iso_639_3_eng": "Preferred measurement unit for the values of the descriptor, chosen from the standard units."},
			"_description": {"iso_639_3_eng": "The field represents the *default unit* for the *values* of the descriptor. This means that when storing values, these should be *converted* to this *default unit*. The field is a controlled vocabulary."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_category",
				"_type": "_type_string_enum",
				"_kind": ["_unit"]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "unit-name",
			"_gid": "_unit-name",
			"_aid": ["unit-name"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Data unit name"},
			"_definition": {"iso_639_3_eng": "Preferred measurement unit for the values of the descriptor, expressed as a name or symbol."},
			"_description": {"iso_639_3_eng": "The field represents the *default unit* for the *values* of the descriptor. This means that when storing values, these should be *converted* to this *default unit*. This field should *only* be used if the desired *unit* is *not available* in the [data unit](_unit) *controlled vocabulary*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_identifier",
				"_type": "_type_string"
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "regexp",
			"_gid": "_regexp",
			"_aid": ["regexp"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Validation pattern"},
			"_definition": {"iso_639_3_eng": "Regular expression for validating the value."},
			"_description": {"iso_639_3_eng": "This field can be used to *validate* data by ensuring it follows a predefined *pattern*. This pattern is a *regular expression*, *regex*, according to the [ECMA 262](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf) dialect. Note that, while validation patterns *apply* explicitly to *strings*, this field may also be used to match patterns in numeric data: numbers will be converted to string for pattern matching.\n\nThis property normally belongs to the [data section](_data), however, besides being used in [descriptors](_term_descriptor) it can also be used in controlled vocabulary types to indicate the pattern of the enumeration codes. In that case it can be added to the [identification section](_code). If this property is used in a [descriptor](_term_descriiptor) that also serves as enumeration type, it will refer to the pattern applied to the [local identifier](_lid), or enumeration code."},
			"_examples": {"iso_639_3_eng": "- `the.\\*fox`: Will match \"*the quick brown fox*\".\n- `^[A-Z]{3}[0-9]{4}$`: Will match \"*ITA1234*\".\n- `^[A-Z]{3}[0-9]{4}$`: Will not match \"*ITA123*\".\n- `^[A-Z]{3}[0-9]{4}$`: Will not match \"*ITA123456*\"."}
		},
		"_data": {
			"_scalar": {
				"_type": "_type_string"
			}
		}
	},
	
	{
		"_code": {
			"_nid": "",
			"_lid": "elements",
			"_gid": "_elements",
			"_aid": ["elements"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Allowed number of elements"},
			"_definition": {"iso_639_3_eng": "This field indicates the allowed range of elements."},
			"_description": {"iso_639_3_eng": "This field is used to *limit* the *number of items* in [arrays](_type_array) or [sets](_type_set). It is a *discrete range* that must be *greater than zero*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_min-items\": 1,\n\t\"_max-items\": 8\n}\n```\n\nThe *array* or *set* can have between `1` and `8` elements.\n\n```json\n{\n\t\"_min-items\": 0\n}\n```\n\nThe *array* or *set* must have at least *one* element.\n\n```json\n{\n\t\"_max-items\": 10\n}\n```\n\nThe *array* or *set* must have less than 10 items."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity",
				"_type": "_type_object",
				"_kind": ["_elements"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_any": ["_min-items", "_max-items"]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "range",
			"_gid": "_range",
			"_aid": ["range"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Range of values"},
			"_definition": {"iso_639_3_eng": "This field indicates a range of values."},
			"_description": {"iso_639_3_eng": "This field defines a *continuous numeric range*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t  \"_min-range-inclusive\": 0.0,\n\t  \"_max-range-inclusive\": 100.0\n}\n```\n\nThis represents a *percentage range*, values are *greater* or *equal* to `0` and smaller or equal to `100`. Fractional values are allowed.\n\n```json\n{\n\t  \"_min-range-inclusive\": 0,\n\t  \"_max-range-inclusive\": 100\n}\n```\n\nSame as above, except that we use integers. Fractional values are allowed.\n\n```json\n{\n\t  \"_min-range-exclusive\": 0\n}\n```\n\nValues are greater than `0`. Fractional values are allowed."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity_averaged",
				"_type": "_type_object",
				"_kind": ["_range"]
			}
		},
		"_rule": {
			"_required": {
				"_selection-descriptors_any-one": [
					["_min-range-inclusive", "_min-range-exclusive"],
					["_max-range-inclusive", "_max-range-exclusive"]
				]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "valid-range",
			"_gid": "_valid-range",
			"_aid": ["valid-range"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Valid range of values"},
			"_definition": {"iso_639_3_eng": "This field indicates the allowed range for values, values that are out of range are considered errors."},
			"_description": {"iso_639_3_eng": "This field defines a *continuous numeric range* within which values are considered *correct*; values *out* of this *range* are considered *errors*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_min-range-inclusive\": 0.0,\n\t\"_max-range-inclusive\": 100.0\n}\n```\n\nThis represents a *percentage range*, values must be *greater* or *equal* to `0` and must be smaller or equal to `100`. Fractional values are allowed. `0.0` is *correct*, `100` is *correct*, `101` is *incorrect* and `-0.1` is *incorrect*.\n\n```json\n{\n\t\"_min-range-inclusive\": 0,\n\t\"_max-range-inclusive\": 100\n}\n```\n\nSame as above, except that we use integers. Fractional values are allowed.\n\n```json\n{\n\t\"_min-range-exclusive\": 0\n}\n```\n\nValues must be greater than `0`. Fractional values are allowed. `0` is *incorrect*, `1` is *correct*, `2.5` is *correct*, `-0.01` is *incorrect*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity_averaged",
				"_type": "_type_object",
				"_kind": ["_range"]
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "normal-range",
			"_gid": "_normal-range",
			"_aid": ["normal-range"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Normal range of values"},
			"_definition": {"iso_639_3_eng": "This field indicates the normal range for values, values that are out of range are considered outliers, not errors."},
			"_description": {"iso_639_3_eng": "This field defines a *continuous numeric range* that represents the bounds *beyond which* values are considered *outliers*."},
			"_examples": {"iso_639_3_eng": "```json\n{\n\t\"_min-range-inclusive\": 0.0,\n\t\"_max-range-inclusive\": 100.0\n}\n```\n\nValues below `0.0` and greater than `100.0` are considered *outliers*, no value is considered errors.\n\n```json\n{\n\t\"_min-range-inclusive\": 0,\n\t\"_max-range-inclusive\": 100\n}\n```\n\nSame as above, except that we use integers. Fractional values are allowed.\n\n```json\n{\n\t\"_min-range-exclusive\": 0\n}\n```\n\nAll values below `0` are considered outliers, no value is considered an error."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity_averaged",
				"_type": "_type_object",
				"_kind": ["_range"]
			}
		}
	},
	
	{
		"_code": {
			"_nid": "",
			"_lid": "min-items",
			"_gid": "_min-items",
			"_aid": ["min-items"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Minimum number of items"},
			"_definition": {"iso_639_3_eng": "This field indicates the minimum number of items a list or set should have."},
			"_description": {"iso_639_3_eng": "This field is relevant only when the *data container* is [array](_array_) or [set](_set_): it indicates the *minimum number of elements* the [array](_array_) or [set](_set_) should have.\n\nThe value is an integer and the *bound* is *inclusive*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity",
				"_type": "_type_integer",
				"_valid-range": {
					"_min-range-inclusive": 0
				}
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "max-items",
			"_gid": "_max-items",
			"_aid": ["max-items"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Maximum number of items"},
			"_definition": {"iso_639_3_eng": "This field indicates the maximum number of items a list or set should have."},
			"_description": {"iso_639_3_eng": "This field is relevant only when the *data container* is [array](_array_) or [set](_set_): it indicates the *maximum number of elements* the [array](_array_) or [set](_set_) should have.\n\nThe value is an integer and the *bound* is *inclusive*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity",
				"_type": "_type_integer"
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "min-range-inclusive",
			"_gid": "_min-range-inclusive",
			"_aid": ["min-range-inclusive"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Range minimum inclusive"},
			"_definition": {"iso_639_3_eng": "This field indicates the minimum value in a range, including the bound itself."},
			"_description": {"iso_639_3_eng": "This field is relevant only for *numeric* [discrete](_type_integer) or [continuous](_type_number) data, it indicates the *minimum bound* of a *range*, *including* the *bound* value. Only numbers *greater or equal* to this field's value are considered *valid*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity_averaged",
				"_type": "_type_number"
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "max-range-inclusive",
			"_gid": "_max-range-inclusive",
			"_aid": ["max-range-inclusive"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Range maximum inclusive"},
			"_definition": {"iso_639_3_eng": "This field indicates the maximum value in a range, including the bound itself."},
			"_description": {"iso_639_3_eng": "This field is relevant only for *numeric* [discrete](_type_integer) or [continuous](_type_number) data, it indicates the *maximum bound* of a *range*, *including* the *bound* value. Only numbers *smaller or equal* to this field's value are considered *valid*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity_averaged",
				"_type": "_type_number"
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "min-range-exclusive",
			"_gid": "_min-range-exclusive",
			"_aid": ["min-range-exclusive"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Range minimum exclusive"},
			"_definition": {"iso_639_3_eng": "This field indicates the minimum value in a range, excluding the bound itself."},
			"_description": {"iso_639_3_eng": "This field is relevant only for *numeric* [discrete](_type_integer) or [continuous](_type_number) data, it indicates the *minimum bound* of a *range*, *excluding* the *bound* value. Only numbers *greater* than this field's value are considered *valid*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity_averaged",
				"_type": "_type_number"
			}
		}
	},
	{
		"_code": {
			"_nid": "",
			"_lid": "max-range-exclusive",
			"_gid": "_max-range-exclusive",
			"_aid": ["max-range-exclusive"]
		},
		"_info": {
			"_title": {"iso_639_3_eng": "Range maximum exclusive"},
			"_definition": {"iso_639_3_eng": "This field indicates the maximum value in a range, excluding the bound itself."},
			"_description": {"iso_639_3_eng": "This field is relevant only for *numeric* [discrete](_type_integer) or [continuous](_type_number) data, it indicates the *maximum bound* of a *range*, *excluding* the *bound* value. Only numbers *smaller* than this field's value are considered *valid*."}
		},
		"_data": {
			"_scalar": {
				"_class": "_class_quantity_averaged",
				"_type": "_type_number"
			}
		}
	}
]