[
    {
        "_code_nid": "_data",
        "_code_lid": "class",
        "_code_gid": "_data_class",
        "_code_fid": "_data_class",
        "_code_aid": ["class"],
        "_info_title": {"iso_639_3_eng": "Data classification"},
        "_info_definition": {"iso_639_3_eng": "The type of the descriptor's values."},
        "_info_description": {"iso_639_3_eng": "This class should indicate whether the *descriptor*&apos;s *data* represents a *quantitative* value, a *categorical* value, or a value that is *neither*. This classification is useful for determining what statistical testing can be applied to the data."},
        "_info_examples": {"iso_639_3_eng": "`category`: Examples of categorical values could be month, sex or country; essentially all items that could belong to a controlled vocabulary.\n\n`quantity`: Examples of quantitative data could be height, weight, age or area; essentially all items that represent an amount.\n\n`other`: Examples of data that is neither categorical nor quantitative could be a name, a description or a telephone number; essentially all items that can take an infinite number of values and that do not represent an amount."},
        "_data_class": "_data_class_category",
        "_data_container": "_data_container_scalar",
        "_data_type": "_data_type_enum",
        "_data_kind": ["_data_class"]
    },
    {
        "_code_nid": "_data",
        "_code_lid": "container",
        "_code_gid": "_data_container",
        "_code_fid": "_data_container",
        "_code_aid": ["container"],
        "_info_title": {"iso_639_3_eng": "Data container"},
        "_info_definition": {"iso_639_3_eng": "Data shape or container"},
        "_info_description": {"iso_639_3_eng": "This field defines how data is *organised* in the descriptor. It essentially indicates whether the descriptor&apos;s *data* is a *collection* or a *scalar value*."},
        "_info_examples": {"iso_639_3_eng": "`scalar`: The data represents a *single value*, the *data type* applies to the *whole value*.\n\n`array`: The data represents a *list* of *values*, the *data type* applies to the *elements* of the *list*.\n\n`set`: The data represents a *list* of *unique values*, the *data type* applies to the *elements* of the *list*.\n\n`dict`: The data is a *key/value dictionary*, the *key* is a *string* and the *data type* determines the type of the *value*. To make the *key* belong to a *controlled vocabulary*, indicate the enumeration *global identifier* in the *data kind* field."},
        "_data_class": "_data_class_category",
        "_data_container": "_data_container_scalar",
        "_data_type": "_data_type_enum",
        "_data_kind": ["_enum_data_containers"]
    },
    {
        "_code_nid": "_data",
        "_code_lid": "type",
        "_code_gid": "_data_type",
        "_code_fid": "_data_type",
        "_code_aid": ["type"],
        "_info_title": {"iso_639_3_eng": "Data type"},
        "_info_definition": {"iso_639_3_eng": "Primitive data type of the descriptor."},
        "_info_description": {"iso_639_3_eng": "This field defines the *data type* of the *descriptor's value*. This category applies to the *whole value* if the [data container](/enum/data/containers) is [scalar](/enum/data/containers/scalar), to the *elements* of the *array* if the [data container](/enum/data/containers) is [list](/enum/data/containers/list) or [set](/enum/data/containers/set) and to the *value part* if the [data container](/enum/data/containers) is a [key/value dictionary](/enum/data/containers/dict)."},
        "_info_examples": {"iso_639_3_eng": "`boolean`: *True* or *false* value.\n\n`integer`: *Numeric discrete* value.\n\n`number`: *Numeric discrete* or *continuous* value; will be considered a *floating point number*.\n\n`string`: A *character* or *text*; assumed to be encoded in UTF-8.\n\n`enum`: A *controlled vocabulary* element. Use the *data kind* field to indicate which enumeration to use, the *data kind* field *must* be *filled* in this case.\n\n`term`: Reference to a *term*, expressed as its *global identifier*.\n\n`record`: Record reference, expressed as the `_id` of a *database record*.\n\n`timestamp`: A *time stamp* expressed in the *native database format*, used to indicate a precise moment in time.\n\n`object`: A *data structure*, expressed as the *global identifier* of the *term* that represents the *structure* tree *root element*."},
        "_data_class": "_data_class_category",
        "_data_container": "_data_container_scalar",
        "_data_type": "_data_type_enum",
        "_data_kind": ["_enum_data_types"]
    },
    {
        "_code_nid": "_data",
        "_code_lid": "format",
        "_code_gid": "_data_format",
        "_code_fid": "_data_format",
        "_code_aid": ["format"],
        "_info_title": {"iso_639_3_eng": "Data format"},
        "_info_definition": {"iso_639_3_eng": "The format or encoding of the data."},
        "_info_description": {"iso_639_3_eng": "This field can be used to indicate that the *value* is *formatted* or *encoded*. The idea is to implement backend functions to validate data provided in the format and handle appropriately the format when returning the data to the user, such as displaying styled text when handling *markdown* or *html*."},
        "_info_examples": {"iso_639_3_eng": "[`markdown`](/enum/data/formats/markdown): [Markdown](https://en.wikipedia.org/wiki/Markdown) formatted string.\n\n[`html`](/enum/data/formats/html): [HyperText](https://en.wikipedia.org/wiki/HTML) markdown formatted string.\n\n[`uri`](/enum/data/formats/uri): [Uniform Resource Identifier](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier).\n\n[`hex`](/enum/data/formats/hex): This option indicates that the value should be treated as a [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) value."},
        "_data_class": "_data_class_category",
        "_data_container": "_data_container_scalar",
        "_data_type": "_data_type_enum",
        "_data_kind": ["enum_data_formats"],
        "_data_rules": ["_enum_data_rules_immutable"]
    },
    {
        "_code_nid": "_data",
        "_code_lid": "kind",
        "_code_gid": "_data_kind",
        "_code_fid": "_data_kind",
        "_code_aid": ["kind"],
        "_info_title": {"iso_639_3_eng": "Type reference"},
        "_info_definition": {"iso_639_3_eng": "Global identifier of the controlled vocabulary, structure or enumeration for the key/value dictionary keys."},
        "_info_description": {"iso_639_3_eng": "This field is only used if the [data type](/data/type) is an [enumeration](/enum/data/types/enum) or [structure](/enum/data/types/struct), or if the [data container](/data/container) is a key/value [dictionary](/enum/data/containers/dict).\n\nIf the data type is [`enum`](/enum/data/types/enum), this field can contain the referenced controlled vocabulary term [global identifier](/codes/gid): in that case the value can only contain members of the referenced enumeration. If the [data type](/data/type) is [`struct`](/enum/data/types/struct), this field can contain the structure's term [global identifier](/codes/gid): in that case the descriptor's value is expected to be an instance of that structure. If this field is omitted, the value may be an element of any controlled vocabulary, if the [data type](/data/type) is [`enum`](/enum/data/types/enum), or any structure if the [data type](/data/type) is [`struct`](/enum/data/types/struct).\n\nIf the data container is [`dict`](/enum/data/containers/dict), this field may contain the [global identifier](/codes/gid) of a controlled vocabulary, in that case the keys of the dictionary are expected to be [local identifiers](/codes/lid) of the enumeration elements. If this field is omitted, the keys are assumed to be strings."},
        "_data_class": "_data_class_other",
        "_data_container": "_data_container_set",
        "_data_type": "_data_type_term",
        "_data_rules": ["_enum_data_rules_immutable"]
    },
    {
        "_code_nid": "_data",
        "_code_lid": "unit",
        "_code_gid": "_data_unit",
        "_code_fid": "_data_unit",
        "_code_aid": ["unit"],
        "_info_title": {"iso_639_3_eng": "Data unit"},
        "_info_definition": {"iso_639_3_eng": "Preferred measurement unit for the values of the descriptor."},
        "_info_description": {"iso_639_3_eng": "The field represents the *default unit* for the *values* of the descriptor. This means that when storing values, these should be *converted* to this *default unit*."},
        "_info_examples": {"iso_639_3_eng": "[`gram`](/enum/data/units/weight/gram): Grams weight unit.\n\n[`centimeter`](/enum/data/units/length/centimeter): Centimeters length unit.\n\n[`hour`](/enum/data/units/time/hour): Hours time unit."},
        "_data_class": "_data_class_category",
        "_data_container": "_data_container_scalar",
        "_data_type": "_data_type_enum",
        "_data_kind": ["_enum_data_units"],
        "_data_rules": ["_enum_data_rules_immutable"]
    },
    {
        "_code_nid": "_data",
        "_code_lid": "size",
        "_code_gid": "_data_size",
        "_code_fid": "_data_size",
        "_code_aid": ["size"],
        "_info_title": {"iso_639_3_eng": "Container size"},
        "_info_definition": {"iso_639_3_eng": "Data container elements count range."},
        "_info_description": {"iso_639_3_eng": "This field is relevant only for [list](/enum/data/containers/list) or [set](/enum/data/containers/set) [containers](/data/container). This field indicates the *minimum* and *maximum* number of *elements* the descriptor's *value* can hold. The value is organised as an *array* in which the *first* value is the *minimum* count and the *second* element is the *maximum* count. If any of the two values is zero, this means that the corresponding bound has no limit."},
        "_info_examples": {"iso_639_3_eng": "`[2, 7]`: An array with at least 2 elements and at most 7 elements.\n\n`[2, 2]`: An array with 2 elements.\n\n`[2, 0]`: An array with at least 2 elements.\n\n`[0, 7]`: An array with at most 7 elements.\n\nNote that the zero value is used as a wildcard, if you want to indicate a list that can have zero elements, do not add the [required](/enum/data/rules/required) [rule](/data/rules)."},
        "_data_class": "_data_class_quantity",
        "_data_container": "_data_container_list",
        "_data_size": [
            2,
            2
        ],
        "_data_type": "_data_type_int",
        "_data_rules": ["_enum_data_rules_immutable"]
    },
    {
        "_code_nid": "_data",
        "_code_lid": "vdrange",
        "_code_gid": "_data_vdrange",
        "_code_fid": "_data_vdrange",
        "_code_aid": ["vdrange"],
        "_info_title": {"iso_639_3_eng": "Valid discrete data range"},
        "_info_definition": {"iso_639_3_eng": "Valid discrete range for data values."},
        "_info_description": {"iso_639_3_eng": "This field can be used to indicate the *valid range* for *discrete* data: values that fall out of this range are considered *errors*.\n\nThis field is relevant if the *data type* is`int`."},
        "_info_examples": {"iso_639_3_eng": "`[-5, true, 20, false]`: A range including `-5` and up to less than `20`. A value of `-5` is valid, `10` is valid and `20` is an error.\n\n`[3, false, 20, true]`: A range above `3` up to `20` included. A value of `3` is an error, `20` is valid and `21` is an error.\n\n`[null, true, 20, false]`: A range below `20`. A value of `19` is valid, a value of `20` is an error.\n\n`[3, true, null, true]`: A range above and including `3`. A value of `3` is valid, `2` is an error."},
        "_data_class": "_data_class_quantity",
        "_data_container": "_data_container_range",
        "_data_type": "_data_type_int"
    },
    {
       "_code_nid": "_data",
        "_code_lid": "vcrange",
        "_code_gid": "_data_vcrange",
        "_code_fid": "_data_vcrange",
        "_code_aid": ["vcrange"],
        "_info_title": {"iso_639_3_eng": "Valid continuous data range"},
        "_info_definition": {"iso_639_3_eng": "Valid continuous range for data values."},
        "_info_description": {"iso_639_3_eng": "This field can be used to indicate the *valid range* for *continuous* data: values that fall out of this range are considered *errors*.\n\nThis field is relevant if the *data type* is`float`."},
        "_info_examples": {"iso_639_3_eng": "`[-5.0, true, 20.0, false]`: A range including `-5.0` and up to less than `20.0`. A value of `-5.0` is valid, `10` is valid and `20.0` is an error.\n\n`[3.2, false, 20.9, true]`: A range above `3.2` up to `20.9` included. A value of `3.2` is an error, `20.9` is valid and `20.91` is an error.\n\n`[null, true, 20.2, false]`: A range below `20.2`. A value of `20.19` is valid, a value of `20.2` is an error.\n\n`[3.7, true, null, true]`: A range above and including `3.7`. A value of `3.7` is valid, `3.6` is an error."},
        "_data_class": "_data_class_quantity",
        "_data_container": "_data_container_range",
        "_data_type": "_data_type_float"
    },
    {
        "_code_nid": "_data",
        "_code_lid": "ndrange",
        "_code_gid": "_data_ndrange",
        "_code_fid": "_data_ndrange",
        "_code_aid": ["ndrange"],
        "_info_title": {"iso_639_3_eng": "Normal discrete data range"},
        "_info_definition": {"iso_639_3_eng": "Normal discrete range for data values."},
        "_info_description": {"iso_639_3_eng": "This field can be used to indicate the *normal range* for *discrete* data: values that fall out of this range are considered *outliers*.\n\nThis field is relevant if the *data type* is`int`."},
        "_info_examples": {"iso_639_3_eng": "`[-5, true, 20, false]`: A range including `-5` and up to less than `20`. A value of `-5` is normal, `10` is normal and `20` is an outlier.\n\n`[3, false, 20, true]`: A range above `3` up to `20` included. A value of `3` is an outlier, `20` is valid and `21` is an outlier.\n\n`[null, true, 20, false]`: A range below `20`. A value of `19` is normal, a value of `20` is an outlier.\n\n`[3, true, null, true]`: A range above and including `3`. A value of `3` is normal, `2` is an outlier."},
        "_data_class": "_data_class_quantity",
        "_data_container": "_data_container_range",
        "_data_type": "_data_type_int"
    },
    {
       "_code_nid": "_data",
        "_code_lid": "ncrange",
        "_code_gid": "_data_ncrange",
        "_code_fid": "_data_ncrange",
        "_code_aid": ["ncrange"],
        "_info_title": {"iso_639_3_eng": "Normal continuous data range"},
        "_info_definition": {"iso_639_3_eng": "Normal continuous range for data values."},
        "_info_description": {"iso_639_3_eng": "This field can be used to indicate the *normal range* for *continuous* data: values that fall out of this range are considered *outliers*.\n\nThis field is relevant if the *data type* is`float`."},
        "_info_examples": {"iso_639_3_eng": "`[-5.0, true, 20.0, false]`: A range including `-5.0` and up to less than `20.0`. A value of `-5.0` is normal, `10` is normal and `20.0` is an outlier.\n\n`[3.2, false, 20.9, true]`: A range above `3.2` up to `20.9` included. A value of `3.2` is an outlier, `20.9` is normal and `20.91` is an outlier.\n\n`[null, true, 20.2, false]`: A range below `20.2`. A value of `20.19` is normal, a value of `20.2` is an outlier.\n\n`[3.7, true, null, true]`: A range above and including `3.7`. A value of `3.7` is normal, `3.6` is an outlier."},
        "_data_class": "_data_class_quantity",
        "_data_container": "_data_container_range",
        "_data_type": "_data_type_float"
    },
    {
        "_code_nid": "_data",
        "_code_lid": "regexp",
        "_code_gid": "_data_regexp",
        "_code_fid": "_data_regexp",
        "_code_aid": ["regexp"],
        "_info_title": {"iso_639_3_eng": "Validation pattern"},
        "_info_definition": {"iso_639_3_eng": "Regular expression for validating the value."},
        "_info_description": {"iso_639_3_eng": "This field can be used to *ensure* that [string](/enum/data/types/string) values have the *correct* *format*, use a *matching regular expression pattern*."},
        "_info_examples": {"iso_639_3_eng": "`the.\\*fox`: Will match \u201c*the quick brown fox*\u201d.\n\n`^[A-Z]{3}[0-9]{4}$*`: Will match \u201c*ITA1234*\u201d.*\n\n`^[A-Z]{3}[0-9]{4}$`*: Will not match \u201c*ITA123*\u201d.*\n\n`^[A-Z]{3}[0-9]{4}$`*: Will not match \u201c*ITA123456*\u201d."},
        "_data_class": "_data_class_other",
        "_data_type": "_data_type_string",
        "_data_container": "_data_container_scalar"
    },
    {
        "_code_nid": "_data",
        "_code_lid": "rules",
        "_code_gid": "_data_rules",
        "_code_fid": "_data_rules",
        "_code_aid": ["rules"],
        "_info_title": {"iso_639_3_eng": "Data rules"},
        "_info_definition": {"iso_639_3_eng": "Data rules and restrictions."},
        "_info_description": {"iso_639_3_eng": "This field determines which *rules* and *restrictions* are *applied* to *values* once they are *stored*."},
        "_info_examples": {"iso_639_3_eng": "[`required`](/enum/data/rules/required): The value cannot be omitted.\n\n[`immutable`](/enum/data/rules/immutable): Once the value has been stored, it cannot be modified."},
        "_data_class": "_data_class_category",
        "_data_container": "_data_container_scalar",
        "_data_type": "_data_type_enum",
        "_data_kind": ["_enum_data_rules"]
    }
]